.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Sys::Statistics::Linux::Processes 3"
.TH Sys::Statistics::Linux::Processes 3 "2007-04-12" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
Sys::Statistics::Linux::Processes \- Collect linux process statistics.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use Sys::Statistics::Linux::Processes;
.Ve
.PP
.Vb 4
\&   my $lxs = new Sys::Statistics::Linux::Processes;
\&   $lxs\->init;
\&   sleep 1;
\&   my $stats = $lxs\->get;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module collects process statistics from the \fI/proc\fR filesystem. It is tested on x86 hardware
with the distributions SuSE (SuSE on s390 and s390x architecture as well), Red Hat, Debian
and Mandrake on kernel versions 2.4 and 2.6 but should also running on other linux distributions
with the same kernel release number. To run this module it is necessary to start it as root or
another user with the authorization to read the \fI/proc\fR filesystem.
.SH "DELTAS"
.IX Header "DELTAS"
It's necessary to initialize the statistics by calling \f(CW\*(C`init()\*(C'\fR, because the statistics are deltas between
the call of \f(CW\*(C`init()\*(C'\fR and \f(CW\*(C`get()\*(C'\fR. By calling \f(CW\*(C`get()\*(C'\fR the deltas be generated and the initial values
be updated automatically. This way making it possible that the call of \f(CW\*(C`init()\*(C'\fR is only necessary
after the call of \f(CW\*(C`new()\*(C'\fR. Further it's recommended to sleep for a while \- at least one second \- between
the call of \f(CW\*(C`init()\*(C'\fR and/or \f(CW\*(C`get()\*(C'\fR if you want to get useful statistics.
.SH "PROCESS STATISTICS"
.IX Header "PROCESS STATISTICS"
Generated by \fI/proc/<number>/statm\fR, \fI/proc/<number>/stat\fR,
\&\fI/proc/<number>/status\fR, \fI/proc/<number>/cmdline\fR and \fI\fIgetpwuid()\fI\fR.
.PP
Note that if \fI/etc/passwd\fR isn't readable, the key owner is set to \fIN/a\fR.
.PP
.Vb 32
\&   ppid      \-  The parent process ID of the process.
\&   owner     \-  The owner name of the process.
\&   pgrp      \-  The group ID of the process.
\&   state     \-  The status of the process.
\&   session   \-  The session ID of the process.
\&   ttynr     \-  The tty the process use.
\&   minflt    \-  The number of minor faults the process made.
\&   cminflt   \-  The number of minor faults the child process made.
\&   mayflt    \-  The number of mayor faults the process made.
\&   cmayflt   \-  The number of mayor faults the child process made.
\&   stime     \-  The number of jiffies the process have beed scheduled in kernel mode.
\&   utime     \-  The number of jiffies the process have beed scheduled in user mode.
\&   ttime     \-  The number of jiffies the process have beed scheduled (user + kernel).
\&   cstime    \-  The number of jiffies the process waited for childrens have been scheduled in kernel mode.
\&   cutime    \-  The number of jiffies the process waited for childrens have been scheduled in user mode.
\&   prior     \-  The priority of the process (+15).
\&   nice      \-  The nice level of the process.
\&   sttime    \-  The time in jiffies the process started after system boot.
\&   actime    \-  The time in D:H:M (days, hours, minutes) the process is active.
\&   vsize     \-  The size of virtual memory of the process.
\&   nswap     \-  The size of swap space of the process.
\&   cnswap    \-  The size of swap space of the childrens of the process.
\&   cpu       \-  The CPU number the process was last executed on.
\&   size      \-  The total program size of the process.
\&   resident  \-  Number of resident set size, this includes the text, data and stack space.
\&   share     \-  Total size of shared pages of the process.
\&   trs       \-  Total text size of the process.
\&   drs       \-  Total data/stack size of the process.
\&   lrs       \-  Total library size of the process.
\&   dtp       \-  Total size of dirty pages of the process (unused since kernel 2.6).
\&   cmd       \-  Command of the process.
\&   cmdline   \-  Command line of the process.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "\fInew()\fP"
.IX Subsection "new()"
Call \f(CW\*(C`new()\*(C'\fR to create a new object.
.PP
.Vb 1
\&   my $lxs = new Sys::Statistics::Linux::Processes;
.Ve
.Sh "\fIinit()\fP"
.IX Subsection "init()"
Call \f(CW\*(C`init()\*(C'\fR to initialize the statistics.
.PP
.Vb 1
\&   $lxs\->init;
.Ve
.Sh "\fIget()\fP"
.IX Subsection "get()"
Call \f(CW\*(C`get()\*(C'\fR to get the statistics. \f(CW\*(C`get()\*(C'\fR returns the statistics as a hash reference.
.PP
.Vb 1
\&   my $stats = $lxs\->get;
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
No exports.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fB\f(BIproc\fB\|(5)\fR
.PP
\&\fBperldoc \-f getpwuid\fR
.SH "REPORTING BUGS"
.IX Header "REPORTING BUGS"
Please report all bugs to <jschulz.cpan(at)bloonix.de>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jonny Schulz <jschulz.cpan(at)bloonix.de>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2006, 2007 by Jonny Schulz. All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
